
name: CI-CD

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main", "release/**" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: andresd1az/vitalapp-tallersoft3

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Sonar Scan
        uses: SonarSource/sonarqube-scan-action@v2
        if: ${{ env.SONAR_TOKEN != '' }}
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

  build-and-push:
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      # url omitted to avoid referencing secrets in workflow parse
    steps:
      - name: SSH deploy (docker compose pull/up)
        uses: appleboy/ssh-action@v1.2.0
        if: ${{ env.STAGING_HOST != '' && env.STAGING_USER != '' && env.STAGING_SSH_KEY != '' }}
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        with:
          host: ${{ env.STAGING_HOST }}
          username: ${{ env.STAGING_USER }}
          key: ${{ env.STAGING_SSH_KEY }}
          script: |
            set -e
            mkdir -p /opt/vitalapp
            cd /opt/vitalapp
            export IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
            export TAG=latest
            chmod +x deploy.sh || true
            ./deploy.sh

  deploy-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://vitalapp.saludvital.com
    steps:
      - name: SSH deploy prod
        uses: appleboy/ssh-action@v1.2.0
        if: ${{ env.PROD_HOST != '' && env.PROD_USER != '' && env.PROD_SSH_KEY != '' }}
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
        with:
          host: ${{ env.PROD_HOST }}
          username: ${{ env.PROD_USER }}
          key: ${{ env.PROD_SSH_KEY }}
          script: |
            set -e
            mkdir -p /opt/vitalapp
            cd /opt/vitalapp
            export IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
            export TAG=latest
            chmod +x deploy.sh || true
            ./deploy.sh
