
name: CI-CD

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main", "release/**" ]
    tags: [ "v*" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: andresd1az/vitalapp-tallersoft3

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: Run tests with coverage
        run: |
          npm test -- --ci --coverage
        env:
          CI: true

      - name: Lint (if modern config present)
        if: ${{ hashFiles('eslint.config.*') != '' }}
        run: npx eslint .

      - name: Sonar Scan
        uses: SonarSource/sonarqube-scan-action@v2
        if: ${{ env.SONAR_TOKEN != '' }}
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

  build-and-push:
    needs: ci
    runs-on: ubuntu-latest
    # build en main y también cuando se taggea una versión
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=sha
            type=semver,pattern={{version}},enable={{startsWith(ref, 'refs/tags/v')}}
            type=semver,pattern={{major}}.{{minor}},enable={{startsWith(ref, 'refs/tags/v')}}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}

  scan-image:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Trivy scan (image)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: table
          ignore-unfixed: true
          vuln-type: os,library
          severity: HIGH,CRITICAL
          exit-code: '1'

  deploy-staging:
    needs: [build-and-push, scan-image]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      # url omitted to avoid referencing secrets in workflow parse
    steps:
      - name: SSH deploy (docker compose pull/up)
        uses: appleboy/ssh-action@v1.2.0
        if: ${{ env.STAGING_HOST != '' && env.STAGING_USER != '' && env.STAGING_SSH_KEY != '' }}
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
          # prefer environment-specific GHCR creds if present; fallback to repo-level
          GHCR_USER: ${{ secrets.STAGING_GHCR_USER || secrets.GHCR_USER }}
          GHCR_PAT: ${{ secrets.STAGING_GHCR_TOKEN || secrets.GHCR_PAT }}
          REPO_SLUG: ${{ github.repository }}
          REF_NAME: ${{ github.ref_name }}
        with:
          host: ${{ env.STAGING_HOST }}
          username: ${{ env.STAGING_USER }}
          key: ${{ env.STAGING_SSH_KEY }}
          envs: GHCR_USER,GHCR_PAT,REPO_SLUG,REF_NAME
          script: |
            set -e
            sudo mkdir -p /opt/vitalapp
            sudo chown -R $USER:$USER /opt/vitalapp
            cd /opt/vitalapp
            # fetch latest scripts from repo (branch or tag)
            BRANCH_OR_TAG="${REF_NAME:-main}"
            BASE_URL="https://raw.githubusercontent.com/${REPO_SLUG}/${BRANCH_OR_TAG}"
            curl -fsSL "${BASE_URL}/deploy.sh" -o deploy.sh || true
            curl -fsSL "${BASE_URL}/docker-compose.yml" -o docker-compose.yml || true
            curl -fsSL "${BASE_URL}/rollback.sh" -o rollback.sh || true
            if [ -n "${GHCR_USER}" ] && [ -n "${GHCR_PAT}" ]; then
              echo "${GHCR_PAT}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin || true
            fi
            docker info | sed -n '1,25p' || true
            export IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
            export TAG=latest
            chmod +x deploy.sh || true
            ./deploy.sh

  deploy-prod:
    needs: [build-and-push, scan-image]
    runs-on: ubuntu-latest
    # despliegue a prod solo cuando se taggea versión (vX.Y.Z)
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://vitalapp.saludvital.com
    steps:
      - name: SSH deploy prod
        uses: appleboy/ssh-action@v1.2.0
        if: ${{ env.PROD_HOST != '' && env.PROD_USER != '' && env.PROD_SSH_KEY != '' }}
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
          GHCR_USER: ${{ secrets.PROD_GHCR_USER || secrets.GHCR_USER }}
          GHCR_PAT: ${{ secrets.PROD_GHCR_TOKEN || secrets.GHCR_PAT }}
          REPO_SLUG: ${{ github.repository }}
          REF_NAME: ${{ github.ref_name }}
        with:
          host: ${{ env.PROD_HOST }}
          username: ${{ env.PROD_USER }}
          key: ${{ env.PROD_SSH_KEY }}
          envs: GHCR_USER,GHCR_PAT,REPO_SLUG,REF_NAME
          script: |
            set -e
            sudo mkdir -p /opt/vitalapp
            sudo chown -R $USER:$USER /opt/vitalapp
            cd /opt/vitalapp
            BRANCH_OR_TAG="${REF_NAME:-main}"
            BASE_URL="https://raw.githubusercontent.com/${REPO_SLUG}/${BRANCH_OR_TAG}"
            curl -fsSL "${BASE_URL}/deploy.sh" -o deploy.sh || true
            curl -fsSL "${BASE_URL}/docker-compose.yml" -o docker-compose.yml || true
            curl -fsSL "${BASE_URL}/rollback.sh" -o rollback.sh || true
            if [ -n "${GHCR_USER}" ] && [ -n "${GHCR_PAT}" ]; then
              echo "${GHCR_PAT}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin || true
            fi
            docker info | sed -n '1,25p' || true
            export IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
            # en prod preferimos el tag semver si es push de tag
            if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
              export TAG="${GITHUB_REF#refs/tags/}"
            else
              export TAG=latest
            fi
            chmod +x deploy.sh || true
            ./deploy.sh

